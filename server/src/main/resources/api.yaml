openapi: 3.0.3
info:
  title: "Kafkalyze API"
  description: "API documentation for the Kafkalyze server"
  version: "0.0.1"
externalDocs:
  description: "Find out more about Kafkalyze"
  url: "https://github.com/tntmeijs/kafkalyze"
servers:
  - url: "http://localhost:8080"
tags:
  - name: "events"
    description: "Kafka event operations"
  - name: "topics"
    description: "Kafka topic operations"
  - name: "statistics"
    description: "System statistics for dashboarding purposes"
paths:
  /api/v1/topics:
    get:
      tags:
        - "topics"
      summary: "Fetch all topics"
      description: "Fetch all available topics on the Kafka broker"
      operationId: "getAllTopics"
      responses:
        "200":
          description: "Successfully fetched topic information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicInformationV1"
    post:
      tags:
        - "topics"
      summary: "Create a new topic"
      description: "Create a new topic on the Kafka broker"
      operationId: "createNewTopic"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNewTopicV1"
      responses:
        "200":
          description: "Successfully created the new topic"
        "400":
          description: "Failed to create the new topic"
  /api/v1/topics/{name}:
    delete:
      tags:
        - "topics"
      summary: "Delete an existing topic"
      description: "Delete an existing topic from the Kafka broker"
      operationId: "deleteExistingTopic"
      parameters:
        - in: path
          name: "name"
          schema:
            type: string
            example: "dev.tahar.topic.sample.a"
          required: true
          description: "Name of the topic to delete"
      responses:
        "200":
          description: "Successfully deleted the topic"
        "400":
          description: "Failed to delete the topic"
  /api/v1/events:
    post:
      tags:
        - "events"
      summary: "Produce a message to Kafka"
      description: "Produce a string message to the specified Kafka topic"
      operationId: "produceStringEventV1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProduceStringEventV1"
      responses:
        "200":
          description: "Event was produced"
  /api/v1/statistics/kafka/events:
    get:
      tags:
        - "statistics"
      summary: "Fetch statistics about Kafka events"
      description: "Fetch statistics about Kafka events such as how many events are stored, events consumed per hour, and more"
      operationId: "fetchEventStatistics"
      responses:
        "200":
          description: "Statistics were fetched successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventStatisticsV1"
  /api/v1/statistics/kafka/cluster:
    get:
      tags:
        - "statistics"
      summary: "Fetch statistics about the Kafka cluster"
      description: "Fetch statistics about the cluster currently connected to Kafkalyze"
      operationId: "fetchClusterStatistics"
      responses:
        "200":
          description: "Cluster statistics were fetched successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KafkaClusterStatistics"
components:
  schemas:
    TopicInformationV1:
      type: object
      description: "List of all available topics on the Kafka broker"
      properties:
        topics:
          type: array
          items:
            type: string
          example: [ "dev.tahar.topic.sample.a", "dev.tahar.topic.sample.b" ]
    CreateNewTopicV1:
      type: object
      description: "Information needed to create a new topic"
      properties:
        name:
          type: string
          example: "dev.tahar.topic.sample.a"
        partitionCount:
          type: integer
          example: 4
        replicationFactor:
          type: integer
          example: 2
    ProduceStringEventV1:
      type: object
      description: "Payload needed to produce the event to Kafka"
      properties:
        data:
          type: string
          example: "{ \"key\": \"hello\", \"value\": \"world\" }"
        topic:
          type: string
          example: "dev.tahar.topic.sample.a"
    EventStatisticsV1:
      type: object
      description: "Statistics about consumed events"
      properties:
        databaseSizeInBytes:
          type: integer
          example: 1500000000
        eventDistributionPerTopic:
          type: object
          additionalProperties:
            type: integer
            format: int64
    KafkaClusterStatistics:
      type: object
      description: "Kafka cluster statistics"
      properties:
        nodes:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              hostname:
                type: string
                example: "localhost"
              port:
                type: integer
                example: 9093
              rack:
                type: string
                example: "rack-identifier"
              isClusterController:
                type: boolean
                example: true
