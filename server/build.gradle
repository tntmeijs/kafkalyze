plugins {
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'org.openapi.generator' version '7.0.0'
    id 'org.springframework.boot' version '3.1.3'
}

group = 'dev.tahar'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = new String("${projectDir}/src/main/resources/api.yaml").replace('\\', '/')
    outputDir = new String("${buildDir}/generated").replace('\\', '/')
    cleanupOutput = true
    configOptions = [
            annotationLibrary    : "none",
            documentationProvider: "none",
            interfaceOnly        : "true",
            openApiNullable      : "false",
            skipDefaultInterface : "true",
            useOptional          : "true",
            useSpringBoot3       : "true",
            useTags              : "true",
    ]
    globalProperties = [
            apis  : "",
            models: "",
    ]
}

sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated/src/main/java"
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.compileJava.dependsOn(tasks.openApiGenerate)
